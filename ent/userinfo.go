// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ent_sample/ent/userinfo"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserInfo is the model entity for the UserInfo schema.
type UserInfo struct {
	config
	// ID of the ent.
	ID             int `json:"id,omitempty"`
	user_user_info *int
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case userinfo.ForeignKeys[0]: // user_user_info
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserInfo fields.
func (ui *UserInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ui.ID = int(value.Int64)
		case userinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_info", value)
			} else if value.Valid {
				ui.user_user_info = new(int)
				*ui.user_user_info = int(value.Int64)
			}
		default:
			ui.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserInfo.
// This includes values selected through modifiers, order, etc.
func (ui *UserInfo) Value(name string) (ent.Value, error) {
	return ui.selectValues.Get(name)
}

// Update returns a builder for updating this UserInfo.
// Note that you need to call UserInfo.Unwrap() before calling this method if this UserInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UserInfo) Update() *UserInfoUpdateOne {
	return NewUserInfoClient(ui.config).UpdateOne(ui)
}

// Unwrap unwraps the UserInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ui *UserInfo) Unwrap() *UserInfo {
	_tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserInfo is not a transactional entity")
	}
	ui.config.driver = _tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UserInfo) String() string {
	var builder strings.Builder
	builder.WriteString("UserInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", ui.ID))
	builder.WriteByte(')')
	return builder.String()
}

// UserInfos is a parsable slice of UserInfo.
type UserInfos []*UserInfo
